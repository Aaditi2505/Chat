# -*- coding: utf-8 -*-
"""add2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17H7GeXLk5E9wbHMdY1tS4bPDVAQNMKMj
"""


# requirements: pandas, sklearn, streamlit, gtts, playsound, gradio, whisper

# ------------------------------
# 🧠 Model and Data Preparation
# ------------------------------
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer

df = pd.read_csv("kamaraj_college_faq.csv")
df.dropna(inplace=True)

le = LabelEncoder()
df["Answer_Label"] = le.fit_transform(df["Answer"])

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df["Question"])
y = df["Answer_Label"]

model = LogisticRegression()
model.fit(X, y)

# ------------------------------
# 🔊 Text-to-Speech (gTTS-based fallback)
# ------------------------------
try:
    import pyttsx3

    def speak_text(text):
        engine = pyttsx3.init()
        engine.setProperty('rate', 150)
        engine.say(text)
        engine.runAndWait()

except ImportError:
    from gtts import gTTS
    import playsound
    import os

    def speak_text(text):
        tts = gTTS(text=text, lang='en')
        filename = "temp_voice.mp3"
        tts.save(filename)
        playsound.playsound(filename)
        os.remove(filename)

# ------------------------------
# 🎧 Whisper Voice Recognition
# ------------------------------
import whisper
whisper_model = whisper.load_model("base")

# ------------------------------
# 🤖 Gradio Voice+Text Chatbot
# ------------------------------
import gradio as gr

def chatbot(audio=None, text=None):
    if audio is not None:
        result = whisper_model.transcribe(audio)
        user_input = result["text"]
    elif text:
        user_input = text
    else:
        return "❗ Please ask a question."

    vec = vectorizer.transform([user_input])
    prediction = model.predict(vec)[0]
    answer = le.inverse_transform([prediction])[0]

    speak_text(answer)

    return f"🗣️ You asked: {user_input}\n\n✅ Answer: {answer}"

def launch_gradio():
    iface = gr.Interface(
        fn=chatbot,
        inputs=[
            gr.Audio(sources=["microphone"], type="filepath", label="🎤 Speak your question"),
            gr.Textbox(lines=2, placeholder="Or type your question here", label="📝 Text question")
        ],
        outputs="text",
        title="🎓 Kamaraj College FAQ - Voice + Text Chatbot",
        description="Ask via microphone or type. It will answer and speak back.",
    )
    iface.launch()

# ------------------------------
# 🖥️ Streamlit Text UI
# ------------------------------
import streamlit as st

def launch_streamlit():
    st.set_page_config(page_title="Kamaraj College FAQ Chatbot", layout="centered")
    st.title("🎓 Kamaraj College FAQ Chatbot")
    st.markdown("Ask anything related to **Kamaraj College of Engineering and Technology**!")

    user_question = st.text_input("💬 Type your question here:")

    if st.button("🔍 Get Answer"):
        if not user_question.strip():
            st.warning("⚠️ Please enter a question.")
        else:
            user_vector = vectorizer.transform([user_question])
            predicted_label = model.predict(user_vector)[0]
            predicted_answer = le.inverse_transform([predicted_label])[0]
            st.success(f"🟢 **Answer:** {predicted_answer}")
            speak_text(predicted_answer)

# ------------------------------
# 🎯 Execution Entry Point
# ------------------------------
if __name__ == "__main__":
    import sys
    if "gradio" in sys.argv:
        launch_gradio()
    else:
        launch_streamlit()
